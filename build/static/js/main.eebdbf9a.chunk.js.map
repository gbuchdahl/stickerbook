{"version":3,"sources":["ClassroomList.js","TeamAdder.js","Sticker.js","Stickers.js","Classroom.js","App.js","serviceWorker.js","index.js"],"names":["ClassroomList","props","classrooms","setCurrent","currentClassroom","className","map","cr","classNames","classCode","onClick","classInfo","teacher","school","TeamAdder","useState","teamName","setTeamName","mentorName","setMentorName","handleSubmit","a","numTeams","fetcher","axios","method","url","data","teamId","class","type","value","onChange","e","target","placeholder","close","emojis","Sticker","role","Math","floor","random","length","Stickers","stickers","_","times","number","console","log","s","Classroom","getClassInfo","authenticated","teams","setTeams","showAddTeam","setShowAddTeam","fetchData","res","isEqual","useEffect","updateStickers","amount","deleteTeam","t","mentor","toString","App","setClassrooms","isAuthenticated","setIsAuthenticated","setCurrentClassroom","authenticate","auth","code","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eebdbf9a.chunk.js","sourcesContent":["import React from 'react';\n\nconst ClassroomList = (props) => {\n\n    const { classrooms, setCurrent, currentClassroom } = props;\n\n\n    return (\n        <div className='columns is-multiline'>\n            {classrooms.map((cr) => {\n                let classNames = 'box';\n                if (currentClassroom !== '') {\n                    classNames = currentClassroom === cr.classCode ? 'box has-background-success' : 'box has-background-white-ter'\n                }\n\n                return <a className='column is-one-third is-one-fifth-desktop' onClick={() => setCurrent(cr.classCode)}>\n                    <div className={classNames}>\n                        <p className='has-text-weight-bold is-size-5'>{cr.classInfo.teacher}</p>\n                        <p>{cr.classInfo.school}</p>\n                    </div>\n                </a>\n            }\n\n            )}\n        </div>)\n\n}\n\nexport default ClassroomList;","import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst TeamAdder = (props) => {\n    let [teamName, setTeamName] = useState(\"\")\n    let [mentorName, setMentorName] = useState(\"\")\n\n    const handleSubmit = async () => {\n        if (!teamName || !mentorName) {\n            return\n        }\n        const { numTeams, classCode, fetcher } = props;\n\n        await axios({\n            method: \"POST\", url: \"/teams/add\", data: {\n                teamName, mentorName, teamId: `${classCode}${numTeams}`, classCode\n            }\n        })\n        setMentorName(\"\")\n        setTeamName(\"\")\n        fetcher()\n    }\n\n    return (\n        <div className='box is-flex-shrink'>\n            <div class=\"field\">\n                <label className=\"label\">Team Name</label>\n                <div className=\"control\">\n                    <input class=\"input\" type=\"text\" value={teamName} onChange={(e) => setTeamName(e.target.value)} placeholder=\"The Fabulous Scratchers\" />\n                </div>\n            </div>\n            <div class=\"field\">\n                <label className=\"label\">Mentor Name</label>\n                <div className=\"control\">\n                    <input class=\"input\" type=\"text\" value={mentorName} onChange={(e) => setMentorName(e.target.value)} placeholder=\"Jimmy A. Scratchyhands\" />\n                </div>\n            </div>\n            <div>\n                <div className=\"field is-grouped\">\n                    <div className=\"control\">\n                        <button onClick={handleSubmit} className=\"button is-link\">Submit</button>\n                    </div>\n                    <div className=\"control\">\n                        <button onClick={() => { setMentorName(\"\"); setTeamName(\"\"); props.close() }} className=\"button is-link is-light\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TeamAdder","import React from 'react'\nimport './Sticker.css'\n\n\nconst emojis = ['😃', '🥳', '🔥', '✨', '😊', '🤩', '🤟', '💅', '💛', '😂', '😏', '😎', '🤠', '😤']\nconst Sticker = () => {\n    return <div className='column box is-64x64 is-narrow mx-3'><span role='img' className='emoji'>{emojis[Math.floor(Math.random() * emojis.length)]}</span></div>\n}\n\nexport default Sticker;","import React from 'react';\nimport _ from 'lodash';\nimport Sticker from './Sticker'\n\nconst Stickers = (props) => {\n    const stickers = _.times(props.number, () => <Sticker />)\n    console.log(stickers)\n    return (<div>\n        <div className='columns'>\n            {stickers.map((s) => s)}\n            <div></div>\n        </div>\n    </div>);\n}\n\n\nexport default Stickers;","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport TeamAdder from './TeamAdder'\nimport Stickers from './Stickers'\n\n\nconst Classroom = (props) => {\n    const { classCode, getClassInfo, authenticated } = props;\n\n    let [teams, setTeams] = useState([]);\n    let [showAddTeam, setShowAddTeam] = useState(false)\n\n    useEffect(() => {\n        setShowAddTeam(false);\n        fetchData();\n    }, [classCode, teams])\n\n    async function fetchData() {\n        const res = await axios(`teams/${classCode}`);\n        if (!_.isEqual(res.data, teams)) {\n            setTeams(res.data);\n        }\n    }\n\n    if (!classCode) {\n        return \"\"\n    }\n\n    const classInfo = getClassInfo(classCode);\n\n    const updateStickers = async (teamId, amount) => {\n        await axios({\n            url: `/teams/update/${teamId}`, method: 'POST', data: {\n                teamId, amount\n            }\n        })\n        fetchData()\n    }\n\n    const deleteTeam = async (teamId) => {\n        await axios({\n            url: '/teams/delete', method: 'POST', data: {\n                teamId\n            }\n        })\n        fetchData()\n    }\n\n\n    return (\n        <div>\n            <h3 className='is-size-3 pb-4'>Teams for {classInfo.teacher}'s class</h3>\n            {teams && teams.map((t) =>\n                <div className='box'>\n                    <div className='ml-0 columns is-flex-direction-row is-justify-content-space-between'>\n                        <p className='has-text-weight-bold is-size-5'>{t.teamName}</p>\n                        {authenticated && <button onClick={() => deleteTeam(t.teamId)} className='button is-danger'>x</button>}\n                    </div>\n                    <p>Mentor: {t.mentor}</p>\n                    <div className='mt-5'>\n                        <Stickers number={t.stickers}></Stickers>\n                    </div>\n                    <div>\n                        {authenticated && <div className='button my-4 mr-2' onClick={() => updateStickers(t.teamId, 1)}>\n                            <p>Add a sticker</p>\n                        </div>}\n                        {authenticated && <div className='button my-4' onClick={() => updateStickers(t.teamId, -1)}>\n                            <p>Remove a sticker</p>\n                        </div>}\n                    </div>\n                </div>)\n            }\n            {authenticated && !showAddTeam && <button onClick={() => setShowAddTeam(true)} className='button is-success my-4'>Add Team</button>}\n            {showAddTeam && <TeamAdder close={() => setShowAddTeam(false)} fetcher={() => setTeams([])} numTeams={(teams.length + 1).toString()} classCode={classCode} />}\n        </div>\n    )\n}\n\nexport default Classroom\n\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport _ from 'lodash'\nimport ClassroomList from './ClassroomList';\nimport Classroom from './Classroom'\nimport './App.css'\n\nfunction App() {\n\n  let [classrooms, setClassrooms] = useState([])\n  let [isAuthenticated, setIsAuthenticated] = useState(false)\n  let [currentClassroom, setCurrentClassroom] = useState(\"\")\n\n  useEffect(() => {\n    fetchData();\n  }, [classrooms])\n\n  async function fetchData() {\n    const res = await axios('/classrooms');\n    if (!_.isEqual(res.data, classrooms)) {\n      setClassrooms(res.data);\n    }\n  }\n\n  // const getClassroomLinks = (classrooms) => {\n  //   return classrooms.map((cr) => <p onClick={setCurrentClassroom(cr.classCode)}>{cr.classInfo.teacher}</p>)\n  // }\n\n  const authenticate = async () => {\n    if (!isAuthenticated) {\n      const res = await axios('/admin');\n      if (res.data.auth) {\n        setIsAuthenticated(true);\n      }\n    } else {\n      setIsAuthenticated(false);\n    }\n  }\n\n  const getClassInfo = (code) => {\n    const cr = classrooms.find((cr) => cr.classCode === code);\n    if (cr) {\n      return cr.classInfo;\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"section hero\">\n        <div className='container'>\n          <div className='columns is-align-content-center is-flex-direction-row is-justify-content-space-between'>\n            <h1 className='title is-size-1'>Code Haven Sticker Sheet</h1>\n            <p onClick={() => authenticate()} className='button'>{isAuthenticated ? 'Log Out' : 'Admin'}</p>\n          </div>\n          <ClassroomList className='pt-4' setCurrent={setCurrentClassroom} classrooms={classrooms} currentClassroom={currentClassroom} />\n        </div>\n      </div>\n      <div className='section'>\n        <div className='container'>\n          <Classroom authenticated={isAuthenticated} classCode={currentClassroom} getClassInfo={getClassInfo}></Classroom>\n        </div >\n      </div >\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}